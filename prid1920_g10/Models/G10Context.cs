using System;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using prid1920_g10.Models;
using prid1920_g10.Helpers;
using PRID_Framework;

namespace prid1920_g10.Models {
    public class G10Context : DbContext {
        public DbSet<User> Users { get; set; }
        public DbSet<Post> Posts { get; set; }
        public DbSet<Tag> Tags { get; set; }
        public DbSet<PostTag> PostTags { get; set; }
        public DbSet<Comment> Comments { get; set; }
        public DbSet<Vote> Votes { get; set; }

        public G10Context(DbContextOptions<G10Context> options)
            : base(options) { }

        protected override void OnModelCreating(ModelBuilder builder) {

            base.OnModelCreating(builder);

            builder.Entity<Comment>()
                .Property(f => f.Id)
                .ValueGeneratedOnAdd();  // autogenerated id
            builder.Entity<User>()
                .HasIndex(u => u.Pseudo)
                .IsUnique(); // unicity pseudo
            builder.Entity<User>()
                .HasIndex(u => u.Email)
                .IsUnique(); // unicity email
            builder.Entity<Tag>()
                .HasIndex(t => t.Name)
                .IsUnique(); // unicity name


            builder.Entity<Vote>()
                .HasKey(v => new { v.AuthorId, v.PostId }); // vote keys => authId & postId
            builder.Entity<PostTag>()
                .HasKey(v => new { v.TagId, v.PostId }); // posttag keys => tagId & postId

            // Comment.Post (1) <--> Post.Comments (*)
            builder.Entity<Comment>()
                .HasOne<Post>(c => c.Post)           // définit la propriété de navigation pour le côté (1) de la relation
                .WithMany(p => p.Comments)           // définit la propriété de navigation pour le côté (N) de la relation
                .HasForeignKey(c => c.PostId)        // spécifie que la clé étrangère est Comment.PostId
                .OnDelete(DeleteBehavior.Cascade);  // spécifie le comportement en cas de delete : ici, un refus
            // Comment.User (1) <--> Post.Comments (*)
            builder.Entity<Comment>()
                .HasOne<User>(c => c.User)
                .WithMany(u => u.Comments)
                .HasForeignKey(c => c.AuthorId)
                .OnDelete(DeleteBehavior.Cascade);

            // Vote.User (1) <--> Post.Votes (*)
            builder.Entity<Vote>()
                .HasOne<User>(v => v.User)
                .WithMany(u => u.Votes)
                .HasForeignKey(v => v.AuthorId)
                .OnDelete(DeleteBehavior.Cascade);
            // Vote.Post (1) <--> Post.Votes (*)
            builder.Entity<Vote>()
                .HasOne<Post>(v => v.Post)
                .WithMany(p => p.Votes)
                .HasForeignKey(v => v.PostId)
                .OnDelete(DeleteBehavior.Cascade);

            // Post.User (1) <--> User.Posts (*)
            builder.Entity<Post>()
                .HasOne<User>(p => p.User)
                .WithMany(u => u.Posts)
                .HasForeignKey(p => p.AuthorId)
                .OnDelete(DeleteBehavior.Cascade);

            // PostTag.Post (1) <--> Post.PostTags (*)
            builder.Entity<PostTag>()
                .HasOne<Post>(pt => pt.Post)
                .WithMany(p => p.PostTags)
                .HasForeignKey(pt => pt.PostId)
                .OnDelete(DeleteBehavior.Cascade);
            // PostTag.Tag (1) <--> Tag.PostTags (*)
            builder.Entity<PostTag>()
                .HasOne<Tag>(pt => pt.Tag)
                .WithMany(t => t.PostTags)
                .HasForeignKey(pt => pt.TagId)
                .OnDelete(DeleteBehavior.Cascade);
        }
    }
}